#!/usr/bin/env bash

set -o errexit
set -o errtrace
set -o pipefail

PACKAGE=$(basename "${BASH_SOURCE[0]}")

BROADCAST_MAC='00:00:00:00:00:00'
AUTO_CONFIG_VNID=0
SHOW_REMOTE_CALL=0

REQUEST_VXLAN_DEV=''
REQUEST_PARENT_DEV=''
REQUEST_VNID=''
REQUEST_CIDR=''
REQUEST_PORT=''
REQUEST_NODES=()
REQUEST_IPS=()
REQUEST_GW_NODE=''
REQUEST_GW_IP=''
REQUEST_ROUTE_TO=()
REQUEST_ROUTE_VIA=()

function ReadParamFromFlags() {
    REQUEST_VXLAN_DEV='eth1'
    REQUEST_PARENT_DEV='eth0'
    REQUEST_VNID=100
    REQUEST_PORT=8472
    REQUEST_GW_NODE=''
    REQUEST_GW_IP=''
    REQUEST_ROUTE_TO=()
    REQUEST_ROUTE_VIA=()

    while test $# -gt 0; do
      case "$1" in
          -h|--help)
            echo "parameters:"
            echo "-h, --help                   show brief help"
            echo "--cidr=CIDR                  specify the cidr of the underlay network, omit if empty"
            echo "--gateway-ip=IP              specify the underlay ip of the gateway, auto-configured if cidr is assigned"
            echo "--add-route-to=CIDR          add an additional route to underlay network device"
            echo "--add-route-via-gw=CIDR      add an additional route via underlay network gateway"
            echo "--underlay-dev=DEV_NAME      designate a name for the device on underlay network, default as $REQUEST_VXLAN_DEV"
            echo "--parent-dev=DEV_NAME        specify the parent device from which underlay device is derived, default as $REQUEST_PARENT_DEV"
            echo "--net-id=ID                  specify the vnid for vxlan tunnel for underlay traffic, auto-configured if empty"
            echo "--udp-port=PORT              specify the udp port of vxlan tunnel for underlay traffic, default as $REQUEST_PORT"
            exit 0
            ;;
          --cidr*)
            REQUEST_CIDR=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          --gateway-ip*)
            REQUEST_GW_IP=`echo $1 | sed -e 's/^[^=]*=//g'`
            REQUEST_GW_IP=$(echo "$REQUEST_GW_IP" | awk '{split($0,a,"/"); print a[1]}')
            shift
            ;;
          --add-route-to*)
            CIDR=`echo $1 | sed -e 's/^[^=]*=//g'`
            REQUEST_ROUTE_TO+=("$CIDR")
            shift
            ;;
          --add-route-via-gw*)
            CIDR=`echo $1 | sed -e 's/^[^=]*=//g'`
            REQUEST_ROUTE_VIA+=("$CIDR")
            shift
            ;;
          --underlay-dev*)
            REQUEST_VXLAN_DEV=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          --parent-dev*)
            REQUEST_PARENT_DEV=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          --net-id*)
            REQUEST_VNID=`echo $1 | sed -e 's/^[^=]*=//g'`
            AUTO_CONFIG_VNID=0
            shift
            ;;
          --udp-port*)
            REQUEST_PORT=`echo $1 | sed -e 's/^[^=]*=//g'`
            shift
            ;;
          *)
            break
            ;;
      esac
    done

    REQUEST_NODES=()

    while test $# -gt 0; do
        case $1 in
        gw:*)
          NODE=${1#"gw:"}
          if [ -n "$REQUEST_GW_NODE" ]; then
              echo "find multiple gw, abort: $REQUEST_GW_NODE, $NODE"
              return 1
          else
              REQUEST_GW_NODE=$NODE
          fi
          shift
          ;;
        *)
          NODE=$1
          shift
          ;;
        esac
        REQUEST_NODES+=("$NODE")
    done

    if [ ${#REQUEST_NODES[@]} -eq 0 ]; then
        echo "must offer some nodes"
        return 1
    fi

    if [ $AUTO_CONFIG_VNID -ne 0 ]; then
        DEV_NO=$(echo "$REQUEST_VXLAN_DEV" | sed 's/[^0-9]//g')
        DEV_NO=${DEV_NO: -1}
        REQUEST_VNID=$((REQUEST_VNID+100+DEV_NO))
        echo "enable auto vnid config, set vnid to $REQUEST_VNID"
    fi

    if [ -z "$REQUEST_GW_NODE" ]; then
        if [ ${#REQUEST_ROUTE_VIA[@]} -ne 0 ]; then
            echo "must specify a gateway if you want to route via it"
            return 1
        fi
    fi

    if [ -z "$REQUEST_CIDR" ]; then
        if [ -n "$REQUEST_GW_NODE" ]; then
            if [ -z "$REQUEST_GW_IP" ]; then
                echo "no gateway ip available for $REQUEST_GW_NODE, abort"
                return 1
            fi

            for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
                NODE=${REQUEST_NODES[$i]}

                if [ $NODE == $REQUEST_GW_NODE ]; then
                    REQUEST_IPS[$i]=$REQUEST_GW_IP
                    break
                fi
            done
        fi

        echo "no cidr found, stop underlay ip auto assignment"
        return 0
    fi

    NET=$(echo "$REQUEST_CIDR" | awk '{split($0,a,"/"); print a[1]}')
    BASE=$(echo "$NET" | awk '{split($0,a,"\."); print a[4]}' 2>/dev/null)
    RANGE=$(echo "$REQUEST_CIDR" | awk '{split($0,a,"/"); print a[2]}')
    IDX=1

    if [ -z "$RANGE" ]; then
        RANGE=24
    fi

    if [ -n "$REQUEST_GW_NODE" ]; then
        if [ -z "$REQUEST_GW_IP" ]; then
            # auto-configure gw ip
            if [[ $RANGE -eq 32 ]]; then
                REQUEST_GW_IP=$(echo "$REQUEST_CIDR" | awk '{split($0,a,"/"); print a[1]}')
            else
                REQUEST_GW_IP="$(echo "$NET" | awk '{split($0,a,"\."); print a[1]}' 2>/dev/null).$(echo "$NET" | awk '{split($0,a,"\."); print a[2]}' 2>/dev/null).$(echo "$NET" | awk '{split($0,a,"\."); print a[3]}' 2>/dev/null)"
                HOST=$((BASE+1))
                IDX=2
                REQUEST_GW_IP="$REQUEST_GW_IP.$HOST"
            fi
            echo "enable auto gw ip config, set it to $REQUEST_GW_IP"
        fi
    fi

    if [[ $RANGE -eq 32 ]]; then
        if [ ${#REQUEST_NODES[@]} -ne 1 ]; then
            echo "$REQUEST_CIDR only supports one single node, abort"
            exit 1
        fi
        REQUEST_IPS[0]="$REQUEST_CIDR"
    else
        for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
            NODE=${REQUEST_NODES[$i]}

            if [ "$NODE" == "$REQUEST_GW_NODE" ]; then
                REQUEST_IPS[$i]="$REQUEST_GW_IP/$RANGE"
            else
                IP="$(echo "$NET" | awk '{split($0,a,"\."); print a[1]}' 2>/dev/null).$(echo "$NET" | awk '{split($0,a,"\."); print a[2]}' 2>/dev/null).$(echo "$NET" | awk '{split($0,a,"\."); print a[3]}' 2>/dev/null)"
                HOST=$((BASE+IDX))
                IDX=$((IDX+1))
                if [ "$REQUEST_GW_IP" == "$IP.$HOST" ]; then
                    # collision avoidance
                    HOST=$((BASE+IDX))
                    IDX=$((IDX+1))
                fi
                IP="$IP.$HOST/$RANGE"
                REQUEST_IPS[$i]=$IP
            fi
        done
    fi
}

function PrintConfigRequestNetwork() {
    echo "[NODES, cidr=$REQUEST_CIDR, vnid=$REQUEST_VNID, port=$REQUEST_PORT]"
    for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
        NODE=${REQUEST_NODES[$i]}
        IP=${REQUEST_IPS[$i]}
        if [ "$NODE" == "$REQUEST_GW_NODE" ]; then
            echo "[$i] [$REQUEST_PARENT_DEV=$NODE, $REQUEST_VXLAN_DEV=$IP, gateway]"
        else
            echo "[$i] [$REQUEST_PARENT_DEV=$NODE, $REQUEST_VXLAN_DEV=$IP]"
        fi
    done

    if [ $((${#REQUEST_ROUTE_TO[@]}+${#REQUEST_ROUTE_VIA[@]})) -eq 0 ]; then
        return 0
    fi

    echo "[MORE ROUTES]"
    idx=0
    for (( i = 0; i < ${#REQUEST_ROUTE_TO[@]}; i++ )); do
        echo "[$idx] [${REQUEST_ROUTE_TO[$i]} dev $REQUEST_VXLAN_DEV]"
        idx=$((idx+1))
    done
    for (( i = 0; i < ${#REQUEST_ROUTE_VIA[@]}; i++ )); do
        echo "[$idx] [${REQUEST_ROUTE_VIA[$i]} dev $REQUEST_VXLAN_DEV via $REQUEST_GW_IP onlink]"
        idx=$((idx+1))
    done

}

function LiteConfigRequestNetwork() {
    # shellcheck disable=SC2016
    LINK_CHECK='$(ip link)'
    DEL_IF_EXISTS="if grep -q $REQUEST_VXLAN_DEV <<< $LINK_CHECK; then sudo ip link del $REQUEST_VXLAN_DEV; fi"

    SETUP="sudo ip link add link $REQUEST_PARENT_DEV name $REQUEST_VXLAN_DEV type vxlan id $REQUEST_VNID dstport $REQUEST_PORT learning && sudo ip link set $REQUEST_VXLAN_DEV up && sudo iptables -P FORWARD ACCEPT"

    FDB=''
    for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
        NODE=${REQUEST_NODES[$i]}
        FDB="$FDB && sudo bridge fdb append $BROADCAST_MAC dev $REQUEST_VXLAN_DEV dst $NODE self permanent"
    done

    ROUTE=''
    for (( i = 0; i < ${#REQUEST_ROUTE_TO[@]}; i++ )); do
        ROUTE="$ROUTE && sudo ip route replace ${REQUEST_ROUTE_TO[$i]} dev $REQUEST_VXLAN_DEV"
    done

    EX_ROUTE=''
    for (( i = 0; i < ${#REQUEST_ROUTE_VIA[@]}; i++ )); do
        EX_ROUTE="$EX_ROUTE && sudo ip route replace ${REQUEST_ROUTE_VIA[$i]} dev $REQUEST_VXLAN_DEV via $REQUEST_GW_IP onlink"
    done


    for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
        NODE=${REQUEST_NODES[$i]}
        IP=${REQUEST_IPS[$i]}

        if [ "$NODE" == "$REQUEST_GW_NODE" ]; then
            echo "[$i] calling slave on gw $NODE:"
            if [ -n "$IP" ]; then
                REMOTE_CALL="$DEL_IF_EXISTS && $SETUP && sudo ip addr add $IP dev $REQUEST_VXLAN_DEV $FDB $ROUTE"
            else
                REMOTE_CALL="$DEL_IF_EXISTS && $SETUP $FDB $ROUTE"
            fi
        else
            echo "[$i] calling slave on node $NODE:"
            if [ -n "$IP" ]; then
                REMOTE_CALL="$DEL_IF_EXISTS && $SETUP && sudo ip addr add $IP dev $REQUEST_VXLAN_DEV $FDB $ROUTE $EX_ROUTE"
            else
                REMOTE_CALL="$DEL_IF_EXISTS && $SETUP $FDB $ROUTE $EX_ROUTE"
            fi
        fi

        # echo "$REMOTE_CALL"
        # echo "remote-call: $REMOTE_CALL"
        if [ $SHOW_REMOTE_CALL -ne 0 ]; then
            echo "$REMOTE_CALL"
        fi
        ssh -t root@"$NODE" "$REMOTE_CALL"
    done
}

function RemoveConfigRequestNetwork() {
    # shellcheck disable=SC2016
    LINK_CHECK='$(ip link show type vxlan)'
    DEL_IF_EXISTS="if grep -q $REQUEST_VXLAN_DEV <<< $LINK_CHECK; then sudo ip link del $REQUEST_VXLAN_DEV; fi"

    for (( i = 0; i < ${#REQUEST_NODES[@]}; i++ )); do
        NODE=${REQUEST_NODES[$i]}
        REMOTE_CALL=$DEL_IF_EXISTS

        # echo "$REMOTE_CALL"
        # echo "remote-call: $REMOTE_CALL"
        if [ $SHOW_REMOTE_CALL -ne 0 ]; then
            echo "$REMOTE_CALL"
        fi
        ssh -t root@"$NODE" "$REMOTE_CALL"
    done
}

function ssh-auth() {
    while test $# -gt 0; do
      case "$1" in
          -h|--help)
          echo "$PACKAGE-ssh-auth - ssh without type password each time"
          echo " "
          echo "$PACKAGE ssh-auth [options] [nodes]"
          echo " "
          echo "options:"
          echo "-h, --help                show brief help"
          exit 0
          ;;
        *)
          break
          ;;
      esac
    done

    ssh-keygen

    while test $# -gt 0; do
      IP=$1
      echo "copy ssh key to $IP"
      ssh-copy-id root@"$IP"
      shift
    done
}

function describe() {
    while test $# -gt 0; do
      case "$1" in
          -h|--help)
            echo "$PACKAGE-describe - describe config of the underlay network"
            echo " "
            echo "$PACKAGE describe [-h|--help]"
            echo "$PACKAGE describe [parameters] [nodes]"
            echo "$PACKAGE describe [parameters] [gw:gateway_node] [other_nodes]"
            echo " "
            break
            ;;
          *)
            break
            ;;
      esac
    done
    AUTO_CONFIG_VNID=1
    ReadParamFromFlags "$@"
    PrintConfigRequestNetwork
}

function install() {
    while test $# -gt 0; do
      case "$1" in
          -h|--help)
            echo "$PACKAGE-install - mocking an underlay network using vxlan tunnel"
            echo " "
            echo "$PACKAGE install [-h|--help]"
            echo "$PACKAGE install [-v|--verbose] [parameters] [nodes]"
            echo "$PACKAGE install [-v|--verbose] [parameters] [gw:gateway_node] [other_nodes]"
            echo " "
            break
            ;;
          -v|--verbose)
            SHOW_REMOTE_CALL=1
            shift
            break
            ;;
          *)
            break
            ;;
      esac
    done
    AUTO_CONFIG_VNID=1
    ReadParamFromFlags "$@"
    LiteConfigRequestNetwork
    echo "underlay network installed!"
}

function remove() {
    while test $# -gt 0; do
      case "$1" in
          -h|--help)
            echo "$PACKAGE-remove - remove the mocking underlay network"
            echo " "
            echo "$PACKAGE remove [-h|--help]"
            echo "$PACKAGE remove [-v|--verbose] [parameters] [nodes]"
            echo " "
            break
            ;;
          -v|--verbose)
            SHOW_REMOTE_CALL=1
            shift
            break
            ;;
          *)
            break
            ;;
      esac
    done
    AUTO_CONFIG_VNID=1
    ReadParamFromFlags "$@"
    RemoveConfigRequestNetwork
    echo "underlay network removed!"
}

function help() {
    echo "$PACKAGE - client for underlay mocker using vxlan tunnel"
    echo " "
    echo "$PACKAGE tool [-h|--help] [options] [other arguments]"
    echo " "
    echo "tools:"
    echo "ssh-auth              authenticate ssh connection towards those nodes"
    echo "describe              describe config of the underlay network"
    echo "install               mocking an underlay network using vxlan tunnel"
    echo "remove                remove the mocking underlay network"
    echo " "
    echo "How to use $PACKAGE to mock an underlay network on VPC:"
    echo "1. copy \"underlayctl\" and your underlay network config to one of your VPC nodes"
    echo "2. use tool \"ssh-auth\" to generate ssh key"
    echo "3. use tool \"install\" to install underlay network config. It will finish rest jobs."
}

if [ $# == 0 ]; then
    help
    exit 0
fi

case "$1" in
  -h|--help)
    help
    exit 0
    ;;
  ssh-auth)
    shift
    ssh-auth "$@"
    ;;
  describe)
    shift
    describe "$@"
    ;;
  install)
    shift
    install "$@"
    ;;
  remove)
    shift
    remove "$@"
    ;;
  *)
    echo "cannot recognize tool: $1"
    help
    ;;
esac

